name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --sdist
      - name: Install built wheel - x86_64
        run: |
          pip install mediapipe_rotations --no-index --find-links dist --force-reinstall
          python -c "import mediapipe_rotations"
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          args: --release --universal2 --out dist
      - name: Install built wheel - universal2
        run: |
          pip install mediapipe_rotations --no-index --find-links dist --force-reinstall
          python -c "import mediapipe_rotations"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          architecture: ${{ matrix.target }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --sdist
      - name: Install built wheel
        run: |
          pip install mediapipe_rotations --no-index --find-links dist --force-reinstall
          python -c "import mediapipe_rotations"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { target: "x86_64-unknown-linux-musl", image_tag: "x86_64-musl" },
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl" },
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl" },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf" },
          { target: "powerpc64le-unknown-linux-musl", image_tag: "powerpc64le-musl" },
        ]
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        CFLAGS_armv7_unknown_linux_musleabihf: '-mfpu=vfpv3-d16'
    steps:
      - uses: actions/checkout@v3
      - name: Build Wheels - manylinux
        uses: PyO3/maturin-action@main
        with:
          target: ${{ matrix.platform.target }}
          manylinux: auto
          container: off
          args: --release -o dist
      - name: Build Wheels - musllinux
        uses: PyO3/maturin-action@main
        with:
          target: ${{ matrix.platform.target }}
          manylinux: musllinux_1_1
          container: off
          args: --release -o dist
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Archive binary
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czvf auditwheel-symbols.tar.gz auditwheel-symbols
          cd -
          # - name: Upload binary to GitHub Release
          #   uses: svenstaro/upload-release-action@v2
          #   if: "startsWith(github.ref, 'refs/tags/')"
          #   with:
          #     repo_token: ${{ secrets.GITHUB_TOKEN }}
          #     asset_name: auditwheel-symbols-${{ matrix.platform.target }}.tar.gz
          #     file: target/${{ matrix.platform.target }}/release/auditwheel-symbols.tar.gz
          #     tag: ${{ github.ref }}

  audit:
    name: Auditwheel Symbols
    runs-on: ubuntu-latest
    needs: [ linux ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install auditwheel-symbols
        run: pip install auditwheel-symbols --no-index --find-links . --force-reinstall
      - name: Run auditwheel-symbols
        run: |
          for wheel in *manylinux*.whl; do
            echo "Processing $wheel"
            auditwheel-symbols "$wheel"
          done

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ macos, windows, audit ]
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          # twine upload --skip-existing *
